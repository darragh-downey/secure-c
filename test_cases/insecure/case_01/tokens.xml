<?xml version="1.0" encoding="UTF-8"?>
<tokens>
    <token>
        <type>IDENT</type>
        <literal>#include</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>&lt;stdio.h&gt;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>#include</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>&lt;string.h&gt;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>#include</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>&lt;stdlib.h&gt;</literal>
    </token>
    <token>
        <type>COMMENT</type>
        <literal>// Buffer overflow example</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>void</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>bufferOverflow</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>LBRACE</type>
        <literal>{</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>LBRACKET</type>
        <literal>[</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>10</literal>
    </token>
    <token>
        <type>RBRACKET</type>
        <literal>]</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>strcpy</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"This string is too long for the buffer"</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"Buffer content: %s\n"</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>RBRACE</type>
        <literal>}</literal>
    </token>
    <token>
        <type>COMMENT</type>
        <literal>// Format string vulnerability example</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>void</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>formatStringVulnerability</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>ASTERISK</type>
        <literal>*</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>LBRACE</type>
        <literal>{</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>LBRACKET</type>
        <literal>[</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>100</literal>
    </token>
    <token>
        <type>RBRACKET</type>
        <literal>]</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>snprintf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>sizeof</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>RBRACE</type>
        <literal>}</literal>
    </token>
    <token>
        <type>COMMENT</type>
        <literal>// Integer overflow example</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>void</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>integerOverflow</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>LBRACE</type>
        <literal>{</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>unsigned</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>int</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>max</literal>
    </token>
    <token>
        <type>ASSIGN</type>
        <literal>=</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>4294967295</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>unsigned</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>int</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>result</literal>
    </token>
    <token>
        <type>ASSIGN</type>
        <literal>=</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>max</literal>
    </token>
    <token>
        <type>PLUS</type>
        <literal>+</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>1</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"Integer overflow result: %u\n"</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>result</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>RBRACE</type>
        <literal>}</literal>
    </token>
    <token>
        <type>COMMENT</type>
        <literal>// Use of gets() function (unsafe)</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>void</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>useOfGets</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>LBRACE</type>
        <literal>{</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>LBRACKET</type>
        <literal>[</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>50</literal>
    </token>
    <token>
        <type>RBRACKET</type>
        <literal>]</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>gets</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"You entered: %s\n"</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>buffer</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>RBRACE</type>
        <literal>}</literal>
    </token>
    <token>
        <type>COMMENT</type>
        <literal>// Use of system() function without validation</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>void</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>useOfSystem</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>ASTERISK</type>
        <literal>*</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>LBRACE</type>
        <literal>{</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>command</literal>
    </token>
    <token>
        <type>LBRACKET</type>
        <literal>[</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>100</literal>
    </token>
    <token>
        <type>RBRACKET</type>
        <literal>]</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>snprintf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>command</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>sizeof</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>command</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"echo %s"</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>system</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>command</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>RBRACE</type>
        <literal>}</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>int</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>main</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>LBRACE</type>
        <literal>{</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>char</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>LBRACKET</type>
        <literal>[</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>100</literal>
    </token>
    <token>
        <type>RBRACKET</type>
        <literal>]</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>bufferOverflow</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"Enter a format string: "</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>scanf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"%99s"</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>formatStringVulnerability</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>integerOverflow</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"Enter a string: "</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>useOfGets</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>printf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"Enter a command: "</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>scanf</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>STRING</type>
        <literal>"%99s"</literal>
    </token>
    <token>
        <type>COMMA</type>
        <literal>,</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>useOfSystem</literal>
    </token>
    <token>
        <type>LPAREN</type>
        <literal>(</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>userInput</literal>
    </token>
    <token>
        <type>RPAREN</type>
        <literal>)</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>IDENT</type>
        <literal>return</literal>
    </token>
    <token>
        <type>INT</type>
        <literal>0</literal>
    </token>
    <token>
        <type>SEMICOLON</type>
        <literal>;</literal>
    </token>
    <token>
        <type>RBRACE</type>
        <literal>}</literal>
    </token>
</tokens>